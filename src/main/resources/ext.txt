@Service
public class TransactionDetailService {

    @Autowired
    private TransactionDetailRepository transactionDetailRepository;

    @Autowired
    private AccountDetailRepository accountDetailRepository;

    @Autowired
    private LedgerRepository ledgerRepository;

    @Transactional
    public TransactionDetail saveTransaction(TransactionDetail transactionDetail) {
        // Retrieve the AccountDetail and Ledger entities by ID
        AccountDetail accountDetail = accountDetailRepository.findById(transactionDetail.getAccountDetail().getAccountNumber())
            .orElseThrow(() -> new RuntimeException("AccountDetail not found"));

        AccountType accountType = accountDetail.getAccountType();
        Ledger ledger = ledgerRepository.findById(accountType.getLedger().getLedgerId())
            .orElseThrow(() -> new RuntimeException("Ledger not found"));

        // Update the balance based on the transaction type
        if (transactionDetail.getTransactionType() == TransactionType.DEPOSIT) {
            accountDetail.setBalance(accountDetail.getBalance() + transactionDetail.getTransactionAmount());
            ledger.setTotalAmount(ledger.getTotalAmount() + transactionDetail.getTransactionAmount());
        } else if (transactionDetail.getTransactionType() == TransactionType.WITHDRAWAL) {
            accountDetail.setBalance(accountDetail.getBalance() - transactionDetail.getTransactionAmount());
            ledger.setTotalAmount(ledger.getTotalAmount() - transactionDetail.getTransactionAmount());
        }

        // Save the updated account detail
        accountDetailRepository.save(accountDetail);

        // Save the updated ledger
        ledgerRepository.save(ledger);

        // Save the transaction detail
        return transactionDetailRepository.save(transactionDetail);
    }
}
